// Generated by Haxe 4.1.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
var FigureType = $hxEnums["FigureType"] = { __ename__ : true, __constructs__ : ["Progressor","Aggressor","Dominator","Liberator","Defensor","Intellector"]
	,Progressor: {_hx_index:0,__enum__:"FigureType",toString:$estr}
	,Aggressor: {_hx_index:1,__enum__:"FigureType",toString:$estr}
	,Dominator: {_hx_index:2,__enum__:"FigureType",toString:$estr}
	,Liberator: {_hx_index:3,__enum__:"FigureType",toString:$estr}
	,Defensor: {_hx_index:4,__enum__:"FigureType",toString:$estr}
	,Intellector: {_hx_index:5,__enum__:"FigureType",toString:$estr}
};
var Color = $hxEnums["Color"] = { __ename__ : true, __constructs__ : ["White","Black"]
	,White: {_hx_index:0,__enum__:"Color",toString:$estr}
	,Black: {_hx_index:1,__enum__:"Color",toString:$estr}
};
var Game = function(whiteLogin,blackLogin) {
	this.id = Main.currID;
	this.whiteLogin = whiteLogin;
	this.blackLogin = blackLogin;
	this.whiteTurn = true;
	this.log = "";
	this.arrangePieces();
};
Game.__name__ = true;
Game.prototype = {
	move: function(fromI,fromJ,toI,toJ) {
		var from = this.field[fromJ][fromI];
		var to = this.field[toJ][toI];
		this.field[toJ][toI] = from;
		if((from.type == FigureType.Intellector && to.type == FigureType.Defensor || from.type == FigureType.Defensor && to.type == FigureType.Intellector) && from.color == to.color) {
			this.field[fromJ][fromI] = to;
		} else {
			this.field[fromJ][fromI] = null;
		}
		this.log += "" + fromI + fromJ + toI + toJ + "\n";
		this.whiteTurn = !this.whiteTurn;
		if(to.type == FigureType.Intellector && from.color != to.color) {
			return from.color;
		} else {
			return null;
		}
	}
	,arrangePieces: function() {
		var _g = [];
		var _g1 = [];
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g.push(_g1);
		var _g1 = [];
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g.push(_g1);
		var _g1 = [];
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g.push(_g1);
		var _g1 = [];
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g.push(_g1);
		var _g1 = [];
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g.push(_g1);
		var _g1 = [];
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g.push(_g1);
		var _g1 = [];
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g1.push(null);
		_g.push(_g1);
		this.field = _g;
		this.field[0][0] = { type : FigureType.Dominator, color : Color.Black};
		this.field[0][1] = { type : FigureType.Liberator, color : Color.Black};
		this.field[0][2] = { type : FigureType.Aggressor, color : Color.Black};
		this.field[0][3] = { type : FigureType.Defensor, color : Color.Black};
		this.field[0][4] = { type : FigureType.Intellector, color : Color.Black};
		this.field[0][5] = { type : FigureType.Defensor, color : Color.Black};
		this.field[0][6] = { type : FigureType.Aggressor, color : Color.Black};
		this.field[0][7] = { type : FigureType.Liberator, color : Color.Black};
		this.field[0][8] = { type : FigureType.Dominator, color : Color.Black};
		this.field[1][0] = { type : FigureType.Progressor, color : Color.Black};
		this.field[1][2] = { type : FigureType.Progressor, color : Color.Black};
		this.field[1][4] = { type : FigureType.Progressor, color : Color.Black};
		this.field[1][6] = { type : FigureType.Progressor, color : Color.Black};
		this.field[1][8] = { type : FigureType.Progressor, color : Color.Black};
		this.field[6][0] = { type : FigureType.Dominator, color : Color.White};
		this.field[5][1] = { type : FigureType.Liberator, color : Color.White};
		this.field[6][2] = { type : FigureType.Aggressor, color : Color.White};
		this.field[5][3] = { type : FigureType.Defensor, color : Color.White};
		this.field[6][4] = { type : FigureType.Intellector, color : Color.White};
		this.field[5][5] = { type : FigureType.Defensor, color : Color.White};
		this.field[6][6] = { type : FigureType.Aggressor, color : Color.White};
		this.field[5][7] = { type : FigureType.Liberator, color : Color.White};
		this.field[6][8] = { type : FigureType.Dominator, color : Color.White};
		this.field[5][0] = { type : FigureType.Progressor, color : Color.White};
		this.field[5][2] = { type : FigureType.Progressor, color : Color.White};
		this.field[5][4] = { type : FigureType.Progressor, color : Color.White};
		this.field[5][6] = { type : FigureType.Progressor, color : Color.White};
		this.field[5][8] = { type : FigureType.Progressor, color : Color.White};
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	Main.currID = Std.parseInt(js_node_Fs.readFileSync(js_node_Path.join(__dirname,"currid.txt"),{ encoding : "UTF-8"}));
	Main.init(js_node_Fs.readFileSync(js_node_Path.join(__dirname,"playerdata.txt"),{ encoding : "UTF-8"}));
};
Main.incrementID = function() {
	Main.currID++;
	js_node_Fs.writeFile(js_node_Path.join(__dirname,"currid.txt"),"" + Main.currID,function(e) {
	});
};
Main.init = function(playerdata) {
	console.log("src/Main.hx:30:",playerdata);
	var _g = 0;
	var _g1 = playerdata.split("\n");
	while(_g < _g1.length) {
		var pair = _g1[_g++].split(":");
		Main.passwords.h[pair[0]] = pair[1];
	}
	var server = new require('socket.io')();
	server.on("connection",Main.onConnected);
	server.on("disconnect",Main.onDisconnected);
	server.listen(8000);
};
Main.onConnected = function(socket) {
	var socket1 = socket;
	socket.on("login",function(data) {
		Main.onLoginAttempt(socket1,data);
	});
};
Main.onDisconnected = function(socket) {
	var _g = haxe_ds_StringMap.kvIterator(Main.loggedPlayers.h);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var k = _g1.key;
		if(_g1.value == socket) {
			var _this = Main.loggedPlayers;
			if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
				delete(_this.h[k]);
			}
			Main.handleDisconnectionForGame(k);
			return;
		}
	}
};
Main.onLoginAttempt = function(socket,data) {
	if(Main.passwords.h[data.login] == haxe_crypto_Md5.encode(data.password)) {
		Main.onLogged(socket,data.login);
		socket.emit("login_success");
	} else {
		socket.emit("login_failed");
	}
};
Main.onLogged = function(socket,login) {
	Main.loggedPlayers.h[login] = socket;
	var socket1 = socket;
	socket.on("callout",function(data) {
		Main.onCallout(socket1,data);
	});
};
Main.onCallout = function(socket,data) {
	if(Object.prototype.hasOwnProperty.call(Main.loggedPlayers.h,data.callee_login)) {
		Main.loggedPlayers.h[data.callee_login].emit("incoming_challenge",{ caller : data.caller_login});
		var login1 = data.callee_login;
		var login2 = data.caller_login;
		var tmp = function() {
			Main.startGame(login1,login2);
		};
		Main.loggedPlayers.h[data.callee_login].on("accept_challenge",tmp);
	} else {
		socket.emit("callee_unavailable");
	}
};
Main.startGame = function(login1,login2) {
	var rand = Math.random();
	var whiteLogin = rand >= 0.5 ? login1 : login2;
	var blackLogin = rand >= 0.5 ? login2 : login1;
	var game = new Game(whiteLogin,blackLogin);
	Main.games.h[whiteLogin] = game;
	Main.games.h[blackLogin] = game;
	var issuerLogin = whiteLogin;
	var tmp = function(data) {
		Main.onMove(issuerLogin,data);
	};
	Main.loggedPlayers.h[whiteLogin].on("move",tmp);
	var issuerLogin1 = blackLogin;
	var tmp = function(data) {
		Main.onMove(issuerLogin1,data);
	};
	Main.loggedPlayers.h[blackLogin].on("move",tmp);
	Main.loggedPlayers.h[whiteLogin].emit("game_started",{ enemy : blackLogin, colour : "white"});
	Main.loggedPlayers.h[blackLogin].emit("game_started",{ enemy : whiteLogin, colour : "black"});
};
Main.onMove = function(issuerLogin,data) {
	var game = Main.games.h[issuerLogin];
	var winner = game.move(data.fromI,data.fromJ,data.toI,data.toJ);
	if(issuerLogin == game.whiteLogin) {
		Main.loggedPlayers.h[game.blackLogin].emit("moved",data);
	} else {
		Main.loggedPlayers.h[game.whiteLogin].emit("moved",data);
	}
	if(winner != null) {
		var winnerLogin = winner == Color.White ? game.whiteLogin : game.blackLogin;
		var loserLogin = winner == Color.White ? game.blackLogin : game.whiteLogin;
		Main.loggedPlayers.h[winnerLogin].emit("win_normal");
		Main.loggedPlayers.h[loserLogin].emit("loss_normal");
		var _this = Main.games;
		if(Object.prototype.hasOwnProperty.call(_this.h,winnerLogin)) {
			delete(_this.h[winnerLogin]);
		}
		var _this = Main.games;
		if(Object.prototype.hasOwnProperty.call(_this.h,loserLogin)) {
			delete(_this.h[loserLogin]);
		}
		game.log += winner == Color.White ? "w" : "b";
		js_node_Fs.writeFile(js_node_Path.join(__dirname,"games/" + game.id + ".txt"),game.log,function(e) {
		});
	}
};
Main.handleDisconnectionForGame = function(disconnectedLogin) {
	if(!Object.prototype.hasOwnProperty.call(Main.games.h,disconnectedLogin)) {
		return;
	}
	var game = Main.games.h[disconnectedLogin];
	if(game.whiteLogin == disconnectedLogin) {
		game.log += "b";
		Main.loggedPlayers.h[game.blackLogin].emit("win_quit");
		var key = game.blackLogin;
		var _this = Main.games;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
	} else {
		game.log += "w";
		Main.loggedPlayers.h[game.whiteLogin].emit("win_quit");
		var key = game.whiteLogin;
		var _this = Main.games;
		if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
			delete(_this.h[key]);
		}
	}
	js_node_Fs.writeFile(js_node_Path.join(__dirname,"games/" + game.id + ".txt"),game.log,function(e) {
	});
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var haxe_crypto_Md5 = function() {
};
haxe_crypto_Md5.__name__ = true;
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	return m.hex(m.doEncode(haxe_crypto_Md5.str2blks(s)));
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	while(_g < blksSize) blks[_g++] = 0;
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] = (blks[k] |= (l >>> 8 & 255) << 8) | (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		return (a >>> 1 | b >>> 1) << 1 | (a & 1 | b & 1);
	}
	,bitXOR: function(a,b) {
		return (a >>> 1 ^ b >>> 1) << 1 | a & 1 ^ b & 1;
	}
	,bitAND: function(a,b) {
		return (a >>> 1 & b >>> 1) << 1 | a & 1 & (b & 1);
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		return (x >> 16) + (y >> 16) + (lsw >> 16) << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += "0123456789abcdef".charAt(num >> 4 & 15) + "0123456789abcdef".charAt(num & 15);
			str += "0123456789abcdef".charAt(num >> 12 & 15) + "0123456789abcdef".charAt(num >> 8 & 15);
			str += "0123456789abcdef".charAt(num >> 20 & 15) + "0123456789abcdef".charAt(num >> 16 & 15);
			str += "0123456789abcdef".charAt(num >> 28 & 15) + "0123456789abcdef".charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Path = require("path");
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.passwords = new haxe_ds_StringMap();
Main.loggedPlayers = new haxe_ds_StringMap();
Main.games = new haxe_ds_StringMap();
Main.main();
})({});
